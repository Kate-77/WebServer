#web server is a computer system that hosts websites, runs web server software. ex: apache http, connected to internet.
#1-shared hosts:multiple users
#2-deidcated hots:single user
#client send http request to the web server response with pages or files or static db
#server:Sets configuration for a virtual server.

server {
#listen:Sets the address and port for IP, or the path for a UNIX-domain socket on which the server will accept requests.
#Since version 1.12 of NGINX, ssl must be specified.
#SSL (Secure Sockets Layer) and its successor, TLS (Transport Layer Security),
#are protocols for establishing authenticated and encrypted links between networked computers.
# Although the SSL protocol was deprecated with the release of TLS 1.0 in 1999,
# it is still common to refer to these related technologies as “SSL” or “SSL/TLS.”
    #listen      443 ssl;
    #listen [::]:443 ssl;
   listen 443;
#server_name:Sets names of a virtual server, The first name becomes the primary server name.
  #  server_name  www.abboutah.42.fr abboutah.42.fr;
#root:Sets the root directory for requests.: search for files
    root    /var/www/;
    index index.php;
#Let's indicate our certificate anr ou key
#    ssl on;
   # ssl_certificate     /etc/nginx/ssl/abboutah.42.fr.crt;
    #ssl_certificate_key /etc/nginx/ssl/abboutah.42.fr.key;
    #ssl_protocols       TLSv1.2 TLSv1.3;
#Specifies a time during which a client may reuse the session parameters.
#    ssl_session_timeout 10m;
 #   keepalive_timeout 70;
#You then need to add rental rules for WordPress.
#The location directive within NGINX server block allows to route request to correct location within the file system.
# the prefix location / will match all requests but will be used as a last resort if no matches are found
    location / {
#try_files :check the existence of files in the specified order
#$uri: It is possible to check directory's existence by specifying a slash at the end of a name
#current URI in request, normalized
#The value of $uri may change during request processing, e.g. when doing internal redirects, or when using index files.
#arguments in the request line
        #try_files $uri $uri /index.php?$args;
  #      add_header Last-Modified $date_gmt;
   # 	add_header Cache-Control 'no-store, no-cache';
#Specifies how to compare modification time of a response with the time in the “If-Modified-Since”
#off:the response is always considered modified (0.7.34);
   #   	if_modified_since off;
    #    expires off;
     #   etag off;
   }
#The modifier ~ in the following location block results in a case sensitive regular expression match but doesn’t stop searching for a better match.
 #The parameter is a regular expression matching all URIs ending with .php
    location ~ \.php$ {
#fastcgi_split_path_info: This directive defines a regular expression with two captured groups.
#The first captured group is used as the value for the $fastcgi_script_name variable.
#The second captured group is used as the value for the $fastcgi_path_info variable.
#Both of these are often used to correctly parse the request so that the processor knows which pieces of the request are the files to run
#and which portions are additional information to pass to the script.
      # fastcgi_split_path_info ^(.+\.php)(/.+)$;
      # try_files $uri = 404;
#FastCGI is a separate protocol that cannot read http headers. Due to this consideration,
# any pertinent information must be passed to the backend through other means.
#fastcgi_pass: forward request from clients to a nackend server
	#fastcgi_pass wordpress:9000;
     #   fastcgi_index index.php;
#include: Again, not a FastCGI-specific directive, but one that gets heavy usage in FastCGI pass contexts.
#Most often, this is used to include common, shared configuration details in multiple locations.
      #  include fastcgi_params;
#The background server should be configured to read and process these, modifying its behavior depending on what it finds.
# Nginx can set FastCGI parameters using the fastcgi_param directive.
#The SCRIPT_FILENAME parameter is set to a combination of the $document_root variable and the $fastcgi_script_name variable.
#The $document_root will contain the path to the base directory, as set by the root directive.
#The $fastcgi_script_name variable will be set to the request URI.
#If the request URI ends with a slash (/), the value of the fastcgi_index directive will be appended onto the end.
       # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       # fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}
